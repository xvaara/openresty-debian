#!/bin/bash

#git clone https://github.com/slact/nchan.git
MODULES=''
DEBVAR='none'
RESTYOLD=''

if [ $(dpkg-query -W -f='${Package}\n' "openresty*" 2>/dev/null | wc -l) -ne 0 ]; then
  RESTY=$(dpkg-query -W -f='${Package},${Status}\n' "openresty*" | grep -oP '.*(?=,install ok installed)' 2>/dev/null)
  read -p "$RESTY found, use same build? (y/n)" -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    DEBVAR="-${RESTY:10}"
  else
    echo "REMEMBER TO REMOVE THE $RESTY version before installing this one!"
    RESTYOLD="  --replaces $RESTY \
  --provides $RESTY \
  --conflicts $RESTY \
  "
  fi
fi

echo "Going with $DEBVAR"

if [[ $DEBVAR == 'none' ]]; then
  DEBVAR=''
  read -p "Build with extras? (y/n)" -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    DEBVAR="$DEBVAR-extras"
  fi

  read -p "Build with nchan? (y/n)" -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    DEBVAR="$DEBVAR-nchan"
  fi

  read -p "Build with brotli? (y/n)" -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    DEBVAR="$DEBVAR-brotli"
  fi
fi

if [[ $DEBVAR = *'extras'* ]]; then

  MODULES="  --with-http_addition_module \
  --with-http_auth_request_module \
  --with-http_dav_module \
  --with-http_flv_module \
  --with-http_gunzip_module \
  --with-http_mp4_module \
  --with-http_random_index_module \
  --with-http_realip_module \
  --with-http_secure_link_module \
  --with-http_slice_module \
  --with-http_sub_module \
  "
fi
if [[ $DEBVAR = *'nchan'* ]]; then
  MODULES="$MODULES   --add-module=../nchan"
fi
if [[ $DEBVAR = *'brotli'* ]]; then
  MODULES="$MODULES   --add-module=../ngx_brotli"
fi

echo "Building variant $DEBVAR"
source get-sources

rm -rf $BUILDROOT
mkdir -p $BUILDROOT

# Compile and install openresty
# look at https://github.com/openresty/openresty-packaging/blob/master/rpm/SPECS/openresty.spec

echo "Compiling openresty..."
cd $BUILDIR/openresty-${OPENRESTYVERSION}
./configure \
  $MODULES \
  --with-file-aio \
  --with-threads \
  --with-ipv6 \
  --without-http_rds_json_module \
  --without-http_rds_csv_module \
  --without-lua_rds_parser \
  --with-stream \
  --with-stream_ssl_module \
  --with-stream_ssl_preread_module \
  --with-http_v2_module \
  --without-mail_pop3_module \
  --without-mail_imap_module \
  --without-mail_smtp_module \
  --with-http_ssl_module \
  --with-http_stub_status_module \
  --with-http_gzip_static_module \
  --with-luajit-xcflags='-DLUAJIT_NUMMODE=2 -DLUAJIT_ENABLE_LUA52COMPAT' \
  --with-dtrace-probes \
  --with-debug \
  --with-openssl=$BUILDIR/openssl-${OPENSSLVERSION} \
  --with-pcre=$BUILDIR/pcre-${PCREVERSION} \
  --with-pcre-jit \
  --with-zlib=$BUILDIR/zlib-${ZLIBVERSION} \
  --with-cc-opt='-O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2 -DNGX_LUA_ABORT_AT_PANIC ' \
  --with-ld-opt='-Wl,-Bsymbolic-functions -Wl,-z,relro' \
  --prefix=/usr/share/nginx \
  --sbin-path=/usr/sbin/nginx \
  --modules-path=/usr/lib/nginx/modules \
  --conf-path=/etc/nginx/nginx.conf \
  --http-log-path=/var/log/nginx/access.log \
  --error-log-path=/var/log/nginx/error.log \
  --lock-path=/var/lock/nginx.lock \
  --pid-path=/run/nginx.pid \
  --http-client-body-temp-path=/var/lib/nginx/body \
  --http-fastcgi-temp-path=/var/lib/nginx/fastcgi \
  --http-proxy-temp-path=/var/lib/nginx/proxy \
  --http-scgi-temp-path=/var/lib/nginx/scgi \
  --http-uwsgi-temp-path=/var/lib/nginx/uwsgi \
  --user=www-data \
  --group=www-data
make -j$(nproc)
make install DESTDIR=$BUILDROOT

# Compile LuaRocks
echo "Compiling Luarocks..."
mkdir -p $BUILDIR/usr/share/nginx
ln -s $BUILDROOT/usr/share/nginx/luajit $BUILDIR/usr/share/nginx/luajit
cd $BUILDIR/luarocks-${LUAROCKSVERSION}
./configure \
  --prefix=$BUILDIR/usr/share/nginx/luajit \
  --with-lua=$BUILDIR/usr/share/nginx/luajit \
  --with-lua-include=$BUILDROOT/usr/share/nginx/luajit/include/luajit-2.1
make build
make install DESTDIR=$BUILDROOT
rm -rf $BUILDIR/usr/share/nginx

mkdir $BUILDIR/nginx-scripts $BUILDIR/nginx-conf
cp $OURDIR/scripts/* $BUILDIR/nginx-scripts
cp $OURDIR/conf/* $BUILDIR/nginx-conf

# Add extras to the build root
echo "Populating build root..."
cd $BUILDROOT
mkdir etc/init.d etc/logrotate.d etc/nginx/sites-available etc/nginx/sites-enabled var/lib var/lib/nginx

mv usr/share/nginx/bin/resty usr/sbin/resty
rm -rf usr/share/nginx/bin

mv usr/share/nginx/nginx/html usr/share/nginx/html
rm -rf usr/share/nginx/nginx

cp -R $BUILDIR/openresty-${OPENRESTYVERSION}/bundle/ngx_lua-${NGXLUAVERSION} usr/share/nginx/lualib
rm etc/nginx/*.default

cp $BUILDIR/nginx-scripts/init etc/init.d/nginx
chmod +x etc/init.d/nginx

cp $BUILDIR/nginx-conf/logrotate etc/logrotate.d/nginx
cp $BUILDIR/nginx-conf/nginx.conf etc/nginx/nginx.conf
cp $BUILDIR/nginx-conf/default etc/nginx/sites-available/default

[ -f /etc/logrotate.d/nginx ] && cp /etc/logrotate.d/nginx etc/logrotate.d/nginx
[ -f /etc/nginx/nginx.conf ] && cp /etc/nginx/nginx.conf etc/nginx/nginx.conf
[ -f /etc/nginx/sites-available/default ] && cp /etc/nginx/sites-available/default etc/nginx/sites-available/default

# Build deb
echo "Building debian package..."
fpm -s dir -t deb \
  --deb-no-default-config-files \
  -n openresty${DEBVAR} \
  -v "${OPENRESTYVERSION}" \
  -C $BUILDROOT \
  -p openresty${DEBVAR}_VERSION_ARCH.deb \
  --description 'a high performance web server and a reverse proxy server' \
  --url 'http://openresty.org/' \
  --category httpd \
  --maintainer 'Jukka Raimovaara <roska@mentalhouse.fi>' \
  --depends wget \
  --depends unzip \
  --depends libncurses5 \
  --depends libreadline7 \
  --deb-build-depends build-essential \
  --replaces 'nginx-full' \
  --provides 'nginx-full' \
  --conflicts 'nginx-full' \
  --replaces 'nginx-common' \
  --provides 'nginx-common' \
  --conflicts 'nginx-common' \
  $RESTYOLD \
  --after-install $BUILDIR/nginx-scripts/postinstall \
  --before-install $BUILDIR/nginx-scripts/preinstall \
  --after-remove $BUILDIR/nginx-scripts/postremove \
  --before-remove $BUILDIR/nginx-scripts/preremove \
  etc run usr var

mkdir $OURDIR/artifacts
cp $BUILDROOT/*.deb $OURDIR/artifacts
#rm -rf $WORKDIR

echo "$OURDIR/artifacts"
ls -l $OURDIR/artifacts

echo "Debian build complete"
